#
# Credits to Phil Hawthorne for the brilliant Dockermon Docker Image
# https://philhawthorne.com/
#
homeassistant:
  customize:
    switch.home_bridge:
      friendly_name: Home Bridge
    switch.influxdb:
      friendly_name: InfluxDb
    switch.grafana:
      friendly_name: Grafana
    switch.ha_dockermon:
      friendly_name: Dockermon

group:
  Docker Containers:
    control: hidden
    entities:
      - switch.home_bridge
      - switch.influxdb
      - switch.grafana
      - switch.dockermon

switch:
  - platform: rest
    resource: !secret docker_home_bridge
    name: Home Bridge
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_influxdb
    name: InfluxDb
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'
 
  - platform: rest
    resource: !secret docker_grafana
    name: Grafana
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

  - platform: rest
    resource: !secret docker_dockermon
    name: HA Dockermon
    body_on: '{"state": "start"}'
    body_off: '{"state": "stop"}'
    is_on_template: '{{ value_json is not none and value_json.state == "running" }}'

automation:
  - alias: Alert when a critical container goes offline
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id:
          - switch.home_bridge
          - switch.influxdb
          - switch.grafana
          - switch.dockermon
        to: 'off'
        for:
          minutes: 5
    condition:
      condition: and
      conditions:
        # Only send this once per hour
        - condition: template
          value_template: >
            {% if states.automation.alert_when_a_critical_container_goes_offline.last_triggered is not none %}
              {% if as_timestamp(now()) | int - as_timestamp(states.automation.alert_when_a_critical_container_goes_offline.attributes.last_triggered) | int > 3600 %} true {% else %} false
              {% endif %}
            {% else %}
            false
            {% endif %}
    action:
       - service: script.notify_me
         data_template:
           message: >
             Docker container {{ trigger.to_state.name }} has stopped running.